import matplotlib.pyplot as plt
sections = {
    "Motivation": "",

    "Background (papers)": "The most similar research I could find on collaborative activity trackers was a paper on an app named 'Pass the Ball' cite{}. This app was very simple: a team has one ball, and the person with that ball could score points for the team by exercising, and pass it to others. This very simple idea lead to many feeling responsibility to exercise when they had the ball. It also lead to lots of issues: users hogging the ball, stealing the ball for a point penalty, etc. There were also issues for users with irregular schedules. This study made me understand the importance of accountability and structure, but also the possible friction that this can cause if not implemented well. I also looked into a case study on 'Spy Feet' cite{} which was a pedometer that let the user progress in a story through walking. The researchers were I did some research into the effectiveness of activity trackers. Although this was singleplayer and story based, it was reassuring to see that gamified abstractions motivated users to exercise more. I also did some research into the state of activity trackers as a whole. 'Behavior Change Techniques in Top-Ranked Mobile Apps for Physical Activity' cite{} talked about the lack of behavioural change techniques employed in top apps, aswell as the two primary categories: educational and motivational. This made me consider which route I should take (I leaned more towards motivational, with educational aspects). 'Apps of Steel: Are Exercise Apps Providing Consumers With Realistic Expectations?' cite{} came to the same conclusion as the earlier paper: apps don't use enough behavioural change techniques. I kept this in mind, but still kept my focus on collaborative aspects. I also read 'Personalizing Mobile Fitness Apps Using Reinforcement Learning', as I was interested in if it was possible to increase the effectiveness of the collaborative techniques through machine learning. This was out of scope to implement due to a lack of experience and time. I read 'A Tale of Two Perspectives: A Conceptual Framework of User Expectations and Experiences of Instructional Fitness Apps' in order to understand what users prioritize in activity trackers. The app found that content was most important for 47.2%, technical implementation and utilities 39.7%, and psychological features were the most important for 13.2% of users. Because of this, I decided that I should pay attention to content and technical details even if they aren't what is being studied, as this will make the app more attractive and usable for participants. Finally, I did some research into behaviour change by looking at 'Integrated Theory of Health Behavior Change'. cite{} I didn't have the time to implement most techniques, but it gave me a good understanding of how social support can be leveraged to drive behavioural change.",

    "Background (existing products)": "I analyzed existing exercise apps, and existing RPG games in order to better understand the two categories I am combining. I analyzed Stronglifts 5x5 and Jefit, two popular exercise apps. Both had inbuilt social features, and online forums to keep people motivated. They had some complicated exercise features like planning workouts that were out of scope for me. I found that Jefit had competitions, but no team based exercising. This clearly shows that there is space in the market for my app. I also analyzed existing RPG/fantasy mobile games. I found that the multiplayer games often had collaborative aspects: for instance, Clash of Clans has clans, were users need to give each other troops in order to optimally defend themselves. In many classic RPG games such as World of Warcraft, users often take specific roles, such as healer, tank, and damage dealer, who all have to work together to defeat harder and harder enemies. It was clear that collaboration was very important for existing multiplayer RPG/fantasy games. From this, I gathered that I should follow the RPG/fantasy model for collaboration, as it has been perfected over years.",

    "Discussion of requirements": "Exercise is hard to do consistently, leading to high inactivity. Social and group based exercise (such as exercising with a friend or joining a class) are good solution for making people feel accountable, and forcing a schedule. Even then, exercise would still be for your own good, and not for some common goal. A collaborative activity tracker would try to remove the buy in of group based exercise (course cost, fixed schedule) and would make the user feel as though they were contributing to a collective success and not just an individual one.",

    "Design (nothing technical)": "Users can join teams with friends or strangers. Each team is assigned an enemy with a particular level and hitpoints. Killing this enemy will take you to the next enemy, who has increased health. Failing to kill the enemy in the allocated time (1 week) resets it's health. Workouts allow you to attack your teams enemy a certain number of times (based on the difficulty of it) where each attack deals damage proportional to your real life relative strength. This aims to reward both effort and progress. There are 6 different animated heroes with idle/attack animations, and 8 different monsters with idle/take damage animations. I tried to make tracking workouts satisfying by showing an animation of your hero attacking the enemy after you track a workout. Streength is tracked through an API which includes 100s of exercises and workouts from a very simple autofilled form. I also added a text chat to each team, along with stats for each user, which should hopefully encourage discussion and collaboration.",

    "Implementation": "The server is built with a technology called Postgraphile. I usually find that a lot of my time goes into implementing basic server logic involving the database (fetch x, update y, delete z). A lot of time also goes into maintaining this code, as changes such as adding relations between data or adding attributes required editing existing queries. Postgraphile creates a GraphQL API from a Postgres database containing all basic CRUD operations, which updates whenever the database does. It did have a steep learning curve: by default, it has no security in regards to who can read and write rows and columns from the database. I'm used to implementing this logic on the server, and not the database. Eventually, I managed  to validate the clients token into a Google ID which was passed as a setting to the query. I then created rules based on the Google ID setting and the associated user by using row level security. These are boolean checks that are applied to rows, where true allows the operation, and false prevents it. An example might be that a group row can only be changed if the authenticated users group name matches the . Another problem I had was the need for side effects when database operations are made. As an example, tracking a workout should damage the current enemy, check if that enemy is dead, in which case the next leveled enemy is set. I solved this by creating database triggers, which are SQL functions that execute on certain operations, such as creating workouts. This created a nice separation between data changes and side effects: Postgraphile would catch client errors such as missing fields, and my database trigger would throw an error if it was implemented poorly. Finally, I implemented chat through Postgraphile's subscriptions. I did this through raising an event with the groups name, along with a row containing this event. Events were raised on chat send, workout create, or exercise personal best via triggers, where the corresponding chat, workout, and personal best was also sent. A client would then subscribe to their team's events. On the other hand"
}

labels = sections.keys()
sizes = [len(s) for s in sections.values()]
fig1, ax1 = plt.subplots()
ax1.pie(sizes, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90, counterclock=False)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.savefig('piechart')
