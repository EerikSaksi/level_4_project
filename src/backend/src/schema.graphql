type AppPrivateUserId implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  username: String
  googleid: String!
}

"""
A condition to be used against `AppPrivateUserId` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AppPrivateUserIdCondition {
  """Checks for equality with the object’s `googleid` field."""
  googleid: String
}

"""An input for mutations affecting `AppPrivateUserId`"""
input AppPrivateUserIdInput {
  username: String
  googleid: String!
}

"""
Represents an update to a `AppPrivateUserId`. Fields that are set will be updated.
"""
input AppPrivateUserIdPatch {
  username: String
  googleid: String
}

"""A connection to a list of `AppPrivateUserId` values."""
type AppPrivateUserIdsConnection {
  """A list of `AppPrivateUserId` objects."""
  nodes: [AppPrivateUserId!]!

  """
  A list of edges which contains the `AppPrivateUserId` and cursor to aid in pagination.
  """
  edges: [AppPrivateUserIdsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AppPrivateUserId` you could get from the connection.
  """
  totalCount: Int!
}

"""A `AppPrivateUserId` edge in the connection."""
type AppPrivateUserIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AppPrivateUserId` at the end of the edge."""
  node: AppPrivateUserId!
}

"""Methods to use when ordering `AppPrivateUserId`."""
enum AppPrivateUserIdsOrderBy {
  NATURAL
  GOOGLEID_ASC
  GOOGLEID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type AppPublicUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  username: String!
}

"""
A condition to be used against `AppPublicUser` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AppPublicUserCondition {
  """Checks for equality with the object’s `username` field."""
  username: String
}

"""An input for mutations affecting `AppPublicUser`"""
input AppPublicUserInput {
  username: String!
}

"""
Represents an update to a `AppPublicUser`. Fields that are set will be updated.
"""
input AppPublicUserPatch {
  username: String
}

"""A connection to a list of `AppPublicUser` values."""
type AppPublicUsersConnection {
  """A list of `AppPublicUser` objects."""
  nodes: [AppPublicUser!]!

  """
  A list of edges which contains the `AppPublicUser` and cursor to aid in pagination.
  """
  edges: [AppPublicUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AppPublicUser` you could get from the connection."""
  totalCount: Int!
}

"""A `AppPublicUser` edge in the connection."""
type AppPublicUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AppPublicUser` at the end of the edge."""
  node: AppPublicUser!
}

"""Methods to use when ordering `AppPublicUser`."""
enum AppPublicUsersOrderBy {
  NATURAL
  USERNAME_ASC
  USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `AppPrivateUserId` mutation."""
input CreateAppPrivateUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AppPrivateUserId` to be created by this mutation."""
  appPrivateUserId: AppPrivateUserIdInput!
}

"""The output of our create `AppPrivateUserId` mutation."""
type CreateAppPrivateUserIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AppPrivateUserId` that was created by this mutation."""
  appPrivateUserId: AppPrivateUserId

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AppPrivateUserId`. May be used by Relay 1."""
  appPrivateUserIdEdge(
    """The method to use when ordering `AppPrivateUserId`."""
    orderBy: [AppPrivateUserIdsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppPrivateUserIdsEdge
}

"""All input for the create `AppPublicUser` mutation."""
input CreateAppPublicUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AppPublicUser` to be created by this mutation."""
  appPublicUser: AppPublicUserInput!
}

"""The output of our create `AppPublicUser` mutation."""
type CreateAppPublicUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AppPublicUser` that was created by this mutation."""
  appPublicUser: AppPublicUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AppPublicUser`. May be used by Relay 1."""
  appPublicUserEdge(
    """The method to use when ordering `AppPublicUser`."""
    orderBy: [AppPublicUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppPublicUsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteAppPrivateUserIdByNodeId` mutation."""
input DeleteAppPrivateUserIdByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AppPrivateUserId` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAppPrivateUserId` mutation."""
input DeleteAppPrivateUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  googleid: String!
}

"""The output of our delete `AppPrivateUserId` mutation."""
type DeleteAppPrivateUserIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AppPrivateUserId` that was deleted by this mutation."""
  appPrivateUserId: AppPrivateUserId
  deletedAppPrivateUserIdNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AppPrivateUserId`. May be used by Relay 1."""
  appPrivateUserIdEdge(
    """The method to use when ordering `AppPrivateUserId`."""
    orderBy: [AppPrivateUserIdsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppPrivateUserIdsEdge
}

"""All input for the `deleteAppPublicUserByNodeId` mutation."""
input DeleteAppPublicUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AppPublicUser` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAppPublicUser` mutation."""
input DeleteAppPublicUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""The output of our delete `AppPublicUser` mutation."""
type DeleteAppPublicUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AppPublicUser` that was deleted by this mutation."""
  appPublicUser: AppPublicUser
  deletedAppPublicUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AppPublicUser`. May be used by Relay 1."""
  appPublicUserEdge(
    """The method to use when ordering `AppPublicUser`."""
    orderBy: [AppPublicUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppPublicUsersEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `AppPrivateUserId`."""
  createAppPrivateUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAppPrivateUserIdInput!
  ): CreateAppPrivateUserIdPayload

  """Creates a single `AppPublicUser`."""
  createAppPublicUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAppPublicUserInput!
  ): CreateAppPublicUserPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  Updates a single `AppPrivateUserId` using its globally unique id and a patch.
  """
  updateAppPrivateUserIdByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAppPrivateUserIdByNodeIdInput!
  ): UpdateAppPrivateUserIdPayload

  """Updates a single `AppPrivateUserId` using a unique key and a patch."""
  updateAppPrivateUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAppPrivateUserIdInput!
  ): UpdateAppPrivateUserIdPayload

  """
  Updates a single `AppPublicUser` using its globally unique id and a patch.
  """
  updateAppPublicUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAppPublicUserByNodeIdInput!
  ): UpdateAppPublicUserPayload

  """Updates a single `AppPublicUser` using a unique key and a patch."""
  updateAppPublicUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAppPublicUserInput!
  ): UpdateAppPublicUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Deletes a single `AppPrivateUserId` using its globally unique id."""
  deleteAppPrivateUserIdByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAppPrivateUserIdByNodeIdInput!
  ): DeleteAppPrivateUserIdPayload

  """Deletes a single `AppPrivateUserId` using a unique key."""
  deleteAppPrivateUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAppPrivateUserIdInput!
  ): DeleteAppPrivateUserIdPayload

  """Deletes a single `AppPublicUser` using its globally unique id."""
  deleteAppPublicUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAppPublicUserByNodeIdInput!
  ): DeleteAppPublicUserPayload

  """Deletes a single `AppPublicUser` using a unique key."""
  deleteAppPublicUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAppPublicUserInput!
  ): DeleteAppPublicUserPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `AppPrivateUserId`."""
  appPrivateUserIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AppPrivateUserId`."""
    orderBy: [AppPrivateUserIdsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AppPrivateUserIdCondition
  ): AppPrivateUserIdsConnection

  """Reads and enables pagination through a set of `AppPublicUser`."""
  appPublicUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AppPublicUser`."""
    orderBy: [AppPublicUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AppPublicUserCondition
  ): AppPublicUsersConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  appPrivateUserId(googleid: String!): AppPrivateUserId
  appPublicUser(username: String!): AppPublicUser
  user(username: String!): User

  """Reads a single `AppPrivateUserId` using its globally unique `ID`."""
  appPrivateUserIdByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `AppPrivateUserId`.
    """
    nodeId: ID!
  ): AppPrivateUserId

  """Reads a single `AppPublicUser` using its globally unique `ID`."""
  appPublicUserByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `AppPublicUser`.
    """
    nodeId: ID!
  ): AppPublicUser

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""All input for the `updateAppPrivateUserIdByNodeId` mutation."""
input UpdateAppPrivateUserIdByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AppPrivateUserId` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AppPrivateUserId` being updated.
  """
  patch: AppPrivateUserIdPatch!
}

"""All input for the `updateAppPrivateUserId` mutation."""
input UpdateAppPrivateUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AppPrivateUserId` being updated.
  """
  patch: AppPrivateUserIdPatch!
  googleid: String!
}

"""The output of our update `AppPrivateUserId` mutation."""
type UpdateAppPrivateUserIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AppPrivateUserId` that was updated by this mutation."""
  appPrivateUserId: AppPrivateUserId

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AppPrivateUserId`. May be used by Relay 1."""
  appPrivateUserIdEdge(
    """The method to use when ordering `AppPrivateUserId`."""
    orderBy: [AppPrivateUserIdsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppPrivateUserIdsEdge
}

"""All input for the `updateAppPublicUserByNodeId` mutation."""
input UpdateAppPublicUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AppPublicUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AppPublicUser` being updated.
  """
  patch: AppPublicUserPatch!
}

"""All input for the `updateAppPublicUser` mutation."""
input UpdateAppPublicUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AppPublicUser` being updated.
  """
  patch: AppPublicUserPatch!
  username: String!
}

"""The output of our update `AppPublicUser` mutation."""
type UpdateAppPublicUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AppPublicUser` that was updated by this mutation."""
  appPublicUser: AppPublicUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AppPublicUser`. May be used by Relay 1."""
  appPublicUserEdge(
    """The method to use when ordering `AppPublicUser`."""
    orderBy: [AppPublicUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppPublicUsersEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  username: String!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  username: String!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `username` field."""
  username: String
}

"""An input for mutations affecting `User`"""
input UserInput {
  username: String!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  username: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  USERNAME_ASC
  USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
